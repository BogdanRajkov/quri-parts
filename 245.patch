From c0e2bd635acbc74bca37eea43857ed565f75d860 Mon Sep 17 00:00:00 2001
From: Kentaro Wada <wada.k@qunasys.com>
Date: Tue, 29 Nov 2022 16:26:40 +0900
Subject: [PATCH 1/3] split transpile module

---
 .../clifford_data_regression.py               |   2 +-
 .../quri_parts/braket/backend/sampling.py     |   3 +-
 .../quri_parts/braket/circuit/__init__.py     |  20 +-
 .../braket/backend/test_braket_sampling.py    |   7 +-
 .../braket/circuit/test_braket_transpile.py   |   2 +-
 .../circuit/quri_parts/circuit/__init__.py    | 121 ++++----
 .../quri_parts/circuit/transpile/__init__.py  | 116 ++++++++
 .../circuit/transpile/clifford_approx.py      |  80 ++++++
 .../gate_kind_decomposer.py}                  | 267 +-----------------
 .../circuit/transpile/identity_insertion.py   |  38 +++
 .../circuit/transpile/transpiler.py           | 158 +++++++++++
 .../circuit/tests/circuit/test_transpile.py   |  34 +--
 .../cirq/circuit/test_cirq_transpiler.py      |   2 +-
 .../qiskit/circuit/test_qiskit_transpile.py   |   2 +-
 .../stim/quri_parts/stim/circuit/__init__.py  |   6 +-
 .../private/algo/eigensolver/cafqa.py         |   2 +-
 16 files changed, 496 insertions(+), 364 deletions(-)
 create mode 100644 packages/circuit/quri_parts/circuit/transpile/__init__.py
 create mode 100644 packages/circuit/quri_parts/circuit/transpile/clifford_approx.py
 rename packages/circuit/quri_parts/circuit/{transpile.py => transpile/gate_kind_decomposer.py} (59%)
 create mode 100644 packages/circuit/quri_parts/circuit/transpile/identity_insertion.py
 create mode 100644 packages/circuit/quri_parts/circuit/transpile/transpiler.py

diff --git a/packages/algo/quri_parts/algo/mitigation/clifford_data_regression/clifford_data_regression.py b/packages/algo/quri_parts/algo/mitigation/clifford_data_regression/clifford_data_regression.py
index 3eacd52f..9cc2c9db 100644
--- a/packages/algo/quri_parts/algo/mitigation/clifford_data_regression/clifford_data_regression.py
+++ b/packages/algo/quri_parts/algo/mitigation/clifford_data_regression/clifford_data_regression.py
@@ -20,12 +20,12 @@
     polynomial_fitting,
 )
 from quri_parts.circuit import (
-    CliffordApproximationTranspiler,
     NonParametricQuantumCircuit,
     QuantumCircuit,
     QuantumGate,
     is_clifford,
 )
+from quri_parts.circuit.transpile import CliffordApproximationTranspiler
 from quri_parts.core.estimator import (
     ConcurrentQuantumEstimator,
     Estimatable,
diff --git a/packages/braket/quri_parts/braket/backend/sampling.py b/packages/braket/quri_parts/braket/backend/sampling.py
index 5ef3d8ba..d6292c33 100644
--- a/packages/braket/quri_parts/braket/backend/sampling.py
+++ b/packages/braket/quri_parts/braket/backend/sampling.py
@@ -30,7 +30,8 @@
     BraketTranspiler,
     convert_circuit,
 )
-from quri_parts.circuit import CircuitTranspiler, NonParametricQuantumCircuit
+from quri_parts.circuit import NonParametricQuantumCircuit
+from quri_parts.circuit.transpile import CircuitTranspiler
 
 
 class BraketSamplingResult(SamplingResult):
diff --git a/packages/braket/quri_parts/braket/circuit/__init__.py b/packages/braket/quri_parts/braket/circuit/__init__.py
index b1d1ddd2..7b4135cb 100644
--- a/packages/braket/quri_parts/braket/circuit/__init__.py
+++ b/packages/braket/quri_parts/braket/circuit/__init__.py
@@ -17,17 +17,7 @@
 from braket.devices import Device
 from typing_extensions import TypeAlias
 
-from quri_parts.circuit import (
-    CircuitTranspiler,
-    CZ2CNOTHTranspiler,
-    IdentityInsertionTranspiler,
-    NonParametricQuantumCircuit,
-    PauliDecomposeTranspiler,
-    PauliRotationDecomposeTranspiler,
-    QuantumGate,
-    SequentialTranspiler,
-    gate_names,
-)
+from quri_parts.circuit import NonParametricQuantumCircuit, QuantumGate, gate_names
 from quri_parts.circuit.gate_names import (
     ParametricGateNameType,
     SingleQubitGateNameType,
@@ -38,6 +28,14 @@
     is_single_qubit_gate_name,
     is_two_qubit_gate_name,
 )
+from quri_parts.circuit.transpile import (
+    CircuitTranspiler,
+    CZ2CNOTHTranspiler,
+    IdentityInsertionTranspiler,
+    PauliDecomposeTranspiler,
+    PauliRotationDecomposeTranspiler,
+    SequentialTranspiler,
+)
 
 BraketCircuitConverter: TypeAlias = Callable[
     [NonParametricQuantumCircuit, Optional[CircuitTranspiler]], Circuit
diff --git a/packages/braket/tests/braket/backend/test_braket_sampling.py b/packages/braket/tests/braket/backend/test_braket_sampling.py
index 00124fa0..829919ec 100644
--- a/packages/braket/tests/braket/backend/test_braket_sampling.py
+++ b/packages/braket/tests/braket/backend/test_braket_sampling.py
@@ -18,11 +18,8 @@
 
 from quri_parts.backend import CompositeSamplingJob
 from quri_parts.braket.backend import BraketSamplingBackend, BraketSamplingResult
-from quri_parts.circuit import (
-    CircuitTranspiler,
-    NonParametricQuantumCircuit,
-    QuantumCircuit,
-)
+from quri_parts.circuit import NonParametricQuantumCircuit, QuantumCircuit
+from quri_parts.circuit.transpile import CircuitTranspiler
 
 
 def circuit_converter(
diff --git a/packages/braket/tests/braket/circuit/test_braket_transpile.py b/packages/braket/tests/braket/circuit/test_braket_transpile.py
index 3f9a624a..9182c0b0 100644
--- a/packages/braket/tests/braket/circuit/test_braket_transpile.py
+++ b/packages/braket/tests/braket/circuit/test_braket_transpile.py
@@ -9,7 +9,7 @@
 # limitations under the License.
 
 from quri_parts.braket.circuit import BraketTranspiler
-from quri_parts.circuit import (
+from quri_parts.circuit.transpile import (
     IdentityInsertionTranspiler,
     PauliDecomposeTranspiler,
     PauliRotationDecomposeTranspiler,
diff --git a/packages/circuit/quri_parts/circuit/__init__.py b/packages/circuit/quri_parts/circuit/__init__.py
index 3d78837b..b63d219b 100644
--- a/packages/circuit/quri_parts/circuit/__init__.py
+++ b/packages/circuit/quri_parts/circuit/__init__.py
@@ -70,37 +70,38 @@
     ParameterMapping,
     ParameterOrLinearFunction,
 )
-from .transpile import (
-    CircuitTranspiler,
-    CliffordApproximationTranspiler,
-    CNOT2CZHTranspiler,
-    CZ2CNOTHTranspiler,
-    H2RZSqrtXTranspiler,
-    IdentityInsertionTranspiler,
-    PauliDecomposeTranspiler,
-    PauliRotationDecomposeTranspiler,
-    RX2RZSqrtXTranspiler,
-    RY2RZSqrtXTranspiler,
-    RZSetTranspiler,
-    S2RZTranspiler,
-    Sdag2RZTranspiler,
-    SequentialTranspiler,
-    SqrtX2RZHTranspiler,
-    SqrtXdag2RZSqrtXTranspiler,
-    SqrtY2RZSqrtXTranspiler,
-    SqrtYdag2RZSqrtXTranspiler,
-    SWAP2CNOTTranspiler,
-    T2RZTranspiler,
-    Tdag2RZTranspiler,
-    U1ToRZTranspiler,
-    U2ToRZSqrtXTranspiler,
-    U3ToRZSqrtXTranspiler,
-    X2HZTranspiler,
-    X2SqrtXTranspiler,
-    Y2RZXTranspiler,
-    Z2HXTranspiler,
-    Z2RZTranspiler,
-)
+
+# from .transpile import (
+#     CircuitTranspiler,
+#     CliffordApproximationTranspiler,
+#     CNOT2CZHTranspiler,
+#     CZ2CNOTHTranspiler,
+#     H2RZSqrtXTranspiler,
+#     IdentityInsertionTranspiler,
+#     PauliDecomposeTranspiler,
+#     PauliRotationDecomposeTranspiler,
+#     RX2RZSqrtXTranspiler,
+#     RY2RZSqrtXTranspiler,
+#     RZSetTranspiler,
+#     S2RZTranspiler,
+#     Sdag2RZTranspiler,
+#     SequentialTranspiler,
+#     SqrtX2RZHTranspiler,
+#     SqrtXdag2RZSqrtXTranspiler,
+#     SqrtY2RZSqrtXTranspiler,
+#     SqrtYdag2RZSqrtXTranspiler,
+#     SWAP2CNOTTranspiler,
+#     T2RZTranspiler,
+#     Tdag2RZTranspiler,
+#     U1ToRZTranspiler,
+#     U2ToRZSqrtXTranspiler,
+#     U3ToRZSqrtXTranspiler,
+#     X2HZTranspiler,
+#     X2SqrtXTranspiler,
+#     Y2RZXTranspiler,
+#     Z2HXTranspiler,
+#     Z2RZTranspiler,
+# )
 
 #: A placeholder representing a constant term.
 CONST = CONST
@@ -163,35 +164,35 @@
     "LinearMappedUnboundParametricQuantumCircuitBase",
     "LinearMappedUnboundParametricQuantumCircuit",
     "ImmutableLinearMappedUnboundParametricQuantumCircuit",
-    "CircuitTranspiler",
-    "SequentialTranspiler",
-    "PauliDecomposeTranspiler",
-    "PauliRotationDecomposeTranspiler",
-    "CliffordApproximationTranspiler",
-    "CNOT2CZHTranspiler",
-    "CZ2CNOTHTranspiler",
-    "SWAP2CNOTTranspiler",
-    "Z2HXTranspiler",
-    "X2HZTranspiler",
-    "X2SqrtXTranspiler",
-    "SqrtX2RZHTranspiler",
-    "H2RZSqrtXTranspiler",
-    "Y2RZXTranspiler",
-    "Z2RZTranspiler",
-    "SqrtXdag2RZSqrtXTranspiler",
-    "SqrtY2RZSqrtXTranspiler",
-    "SqrtYdag2RZSqrtXTranspiler",
-    "S2RZTranspiler",
-    "Sdag2RZTranspiler",
-    "T2RZTranspiler",
-    "Tdag2RZTranspiler",
-    "RX2RZSqrtXTranspiler",
-    "RY2RZSqrtXTranspiler",
-    "U1ToRZTranspiler",
-    "U2ToRZSqrtXTranspiler",
-    "U3ToRZSqrtXTranspiler",
-    "IdentityInsertionTranspiler",
-    "RZSetTranspiler",
+    # "CircuitTranspiler",
+    # "SequentialTranspiler",
+    # "PauliDecomposeTranspiler",
+    # "PauliRotationDecomposeTranspiler",
+    # "CliffordApproximationTranspiler",
+    # "CNOT2CZHTranspiler",
+    # "CZ2CNOTHTranspiler",
+    # "SWAP2CNOTTranspiler",
+    # "Z2HXTranspiler",
+    # "X2HZTranspiler",
+    # "X2SqrtXTranspiler",
+    # "SqrtX2RZHTranspiler",
+    # "H2RZSqrtXTranspiler",
+    # "Y2RZXTranspiler",
+    # "Z2RZTranspiler",
+    # "SqrtXdag2RZSqrtXTranspiler",
+    # "SqrtY2RZSqrtXTranspiler",
+    # "SqrtYdag2RZSqrtXTranspiler",
+    # "S2RZTranspiler",
+    # "Sdag2RZTranspiler",
+    # "T2RZTranspiler",
+    # "Tdag2RZTranspiler",
+    # "RX2RZSqrtXTranspiler",
+    # "RY2RZSqrtXTranspiler",
+    # "U1ToRZTranspiler",
+    # "U2ToRZSqrtXTranspiler",
+    # "U3ToRZSqrtXTranspiler",
+    # "IdentityInsertionTranspiler",
+    # "RZSetTranspiler",
     "inverse_gate",
     "is_clifford",
 ]
diff --git a/packages/circuit/quri_parts/circuit/transpile/__init__.py b/packages/circuit/quri_parts/circuit/transpile/__init__.py
new file mode 100644
index 00000000..1b4eeda4
--- /dev/null
+++ b/packages/circuit/quri_parts/circuit/transpile/__init__.py
@@ -0,0 +1,116 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from typing import Callable
+
+from .clifford_approx import CliffordApproximationTranspiler
+from .gate_kind_decomposer import (
+    CZ2CNOTHTranspiler,
+    H2RZSqrtXTranspiler,
+    PauliDecomposeTranspiler,
+    PauliRotationDecomposeTranspiler,
+    RX2RZSqrtXTranspiler,
+    RY2RZSqrtXTranspiler,
+    S2RZTranspiler,
+    Sdag2RZTranspiler,
+    SqrtX2RZHTranspiler,
+    SqrtXdag2RZSqrtXTranspiler,
+    SqrtY2RZSqrtXTranspiler,
+    SqrtYdag2RZSqrtXTranspiler,
+    SWAP2CNOTTranspiler,
+    T2RZTranspiler,
+    Tdag2RZTranspiler,
+    U1ToRZTranspiler,
+    U2ToRZSqrtXTranspiler,
+    U3ToRZSqrtXTranspiler,
+    X2HZTranspiler,
+    X2SqrtXTranspiler,
+    Y2RZXTranspiler,
+    Z2HXTranspiler,
+    Z2RZTranspiler,
+)
+from .identity_insertion import IdentityInsertionTranspiler
+from .transpiler import (
+    CircuitTranspiler,
+    CircuitTranspilerProtocol,
+    GateDecomposer,
+    GateKindDecomposer,
+    ParallelDecomposer,
+    SequentialTranspiler,
+)
+
+#: CircuitTranspiler to transpile a QuntumCircuit into another
+#: QuantumCircuit containing only X, SqrtX, CNOT, and RZ.
+RZSetTranspiler: Callable[[], CircuitTranspiler] = lambda: SequentialTranspiler(
+    [
+        ParallelDecomposer(
+            [
+                CZ2CNOTHTranspiler(),
+                PauliDecomposeTranspiler(),
+                PauliRotationDecomposeTranspiler(),
+            ]
+        ),
+        ParallelDecomposer(
+            [
+                Y2RZXTranspiler(),
+                Z2RZTranspiler(),
+                H2RZSqrtXTranspiler(),
+                SqrtXdag2RZSqrtXTranspiler(),
+                SqrtY2RZSqrtXTranspiler(),
+                SqrtYdag2RZSqrtXTranspiler(),
+                S2RZTranspiler(),
+                Sdag2RZTranspiler(),
+                T2RZTranspiler(),
+                Tdag2RZTranspiler(),
+                RX2RZSqrtXTranspiler(),
+                RY2RZSqrtXTranspiler(),
+                U1ToRZTranspiler(),
+                U2ToRZSqrtXTranspiler(),
+                U3ToRZSqrtXTranspiler(),
+            ]
+        ),
+    ]
+)
+
+
+__all__ = [
+    "CircuitTranspiler",
+    "CircuitTranspilerProtocol",
+    "SequentialTranspiler",
+    "GateDecomposer",
+    "GateKindDecomposer",
+    "ParallelDecomposer",
+    "CliffordApproximationTranspiler",
+    "IdentityInsertionTranspiler",
+    "CZ2CNOTHTranspiler",
+    "H2RZSqrtXTranspiler",
+    "PauliDecomposeTranspiler",
+    "PauliRotationDecomposeTranspiler",
+    "RX2RZSqrtXTranspiler",
+    "RY2RZSqrtXTranspiler",
+    "RZSetTranspiler",
+    "S2RZTranspiler",
+    "Sdag2RZTranspiler",
+    "SqrtX2RZHTranspiler",
+    "SqrtXdag2RZSqrtXTranspiler",
+    "SqrtY2RZSqrtXTranspiler",
+    "SqrtYdag2RZSqrtXTranspiler",
+    "SWAP2CNOTTranspiler",
+    "T2RZTranspiler",
+    "Tdag2RZTranspiler",
+    "U1ToRZTranspiler",
+    "U2ToRZSqrtXTranspiler",
+    "U3ToRZSqrtXTranspiler",
+    "X2HZTranspiler",
+    "X2SqrtXTranspiler",
+    "Y2RZXTranspiler",
+    "Z2HXTranspiler",
+    "Z2RZTranspiler",
+]
diff --git a/packages/circuit/quri_parts/circuit/transpile/clifford_approx.py b/packages/circuit/quri_parts/circuit/transpile/clifford_approx.py
new file mode 100644
index 00000000..751e4cd4
--- /dev/null
+++ b/packages/circuit/quri_parts/circuit/transpile/clifford_approx.py
@@ -0,0 +1,80 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from collections.abc import Sequence
+
+import numpy as np
+
+from quri_parts.circuit import QuantumGate, gate_names, gates
+
+from .gate_kind_decomposer import (
+    PauliRotationDecomposeTranspiler,
+    U1ToRZTranspiler,
+    U2ToRZSqrtXTranspiler,
+    U3ToRZSqrtXTranspiler,
+)
+from .transpiler import GateDecomposer
+
+
+class CliffordApproximationTranspiler(GateDecomposer):
+    r"""CircuitTranspiler, which replaces the non_clifford gate into sequence of
+    non-parametric Clifford gates.
+
+    If the input gate has angles, this transpiler replaces them with the
+    closest value in the set :math:`\{\pi n /2| n\in\mathbb{Z}\}`. Then
+    by using the rotation gate transpilers, it is decomposed into a
+    sequence of non-parametric Clifford gates.
+    """
+
+    def is_target_gate(self, gate: QuantumGate) -> bool:
+        return gate.name not in gate_names.CLIFFORD_GATE_NAMES
+
+    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
+        clif_set_x = {0: "Identity", 1: "SqrtX", 2: "X", 3: "SqrtXdag"}
+        clif_set_y = {0: "Identity", 1: "SqrtY", 2: "Y", 3: "SqrtYdag"}
+        clif_set_z = {0: "Identity", 1: "S", 2: "Z", 3: "Sdag"}
+        clif_set = {"RX": clif_set_x, "RY": clif_set_y, "RZ": clif_set_z}
+
+        target = gate.target_indices[0]
+        if gate.name == "T":
+            return [gates.S(target)]
+
+        elif gate.name == "Tdag":
+            return [gates.Sdag(target)]
+
+        elif gate.name in {"RX", "RY", "RZ", "U1", "U2", "U3", "PauliRotation"}:
+            if gate.name in {"RX", "RY", "RZ"}:
+                transpiled_gates: Sequence[QuantumGate] = [gate]
+            if gate.name == "U1":
+                transpiled_gates = U1ToRZTranspiler().decompose(gate)
+            if gate.name == "U2":
+                transpiled_gates = U2ToRZSqrtXTranspiler().decompose(gate)
+            if gate.name == "U3":
+                transpiled_gates = U3ToRZSqrtXTranspiler().decompose(gate)
+            if gate.name == "PauliRotation":
+                transpiled_gates = PauliRotationDecomposeTranspiler().decompose(gate)
+
+            appro_gates = []
+            for g in transpiled_gates:
+                if g.name in {"RX", "RY", "RZ"}:
+                    param = g.params[0]
+                    angle_int = np.round(2 * param / np.pi) % 4
+                    appro_gates.append(
+                        QuantumGate(clif_set[g.name][angle_int], (g.target_indices[0],))
+                    )
+                    continue
+                appro_gates.append(g)
+            return appro_gates
+
+        else:
+            raise NotImplementedError(
+                f"The input gate {gate.name} is not supported on the\
+                CliffordApproximationTranspiler."
+            )
diff --git a/packages/circuit/quri_parts/circuit/transpile.py b/packages/circuit/quri_parts/circuit/transpile/gate_kind_decomposer.py
similarity index 59%
rename from packages/circuit/quri_parts/circuit/transpile.py
rename to packages/circuit/quri_parts/circuit/transpile/gate_kind_decomposer.py
index 1c6f7b9c..360f729e 100644
--- a/packages/circuit/quri_parts/circuit/transpile.py
+++ b/packages/circuit/quri_parts/circuit/transpile/gate_kind_decomposer.py
@@ -8,158 +8,13 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-from abc import ABC, abstractmethod
-from collections.abc import Mapping, Sequence
-from typing import Callable, Protocol
+from collections.abc import Sequence
 
 import numpy as np
-from typing_extensions import TypeAlias
 
-from quri_parts.circuit import gate_names, gates
+from quri_parts.circuit import QuantumGate, gate_names, gates
 
-from .circuit import NonParametricQuantumCircuit, QuantumCircuit
-from .gate import QuantumGate
-
-#: CircuitTranspiler Interface. A function or callable object that can map
-#: NonParametricQuantumCircuit to NonParametricQuantumCircuit.
-CircuitTranspiler: TypeAlias = Callable[
-    [NonParametricQuantumCircuit], NonParametricQuantumCircuit
-]
-
-
-class CircuitTranspilerProtocol(Protocol):
-    """Protocol of callable class that transpiles NonParametricQuantumCircuit
-    to NonParametricQuantumCircuit."""
-
-    @abstractmethod
-    def __call__(
-        self, circuit: NonParametricQuantumCircuit
-    ) -> NonParametricQuantumCircuit:
-        ...
-
-
-class SequentialTranspiler(CircuitTranspilerProtocol):
-    """CircuitTranspiler, which applies CircuitTranspilers in sequence.
-
-    Args:
-        transpilers: Sequence of CircuitTranspilers.
-
-    Examples:
-        .. highlight:: python
-        .. code-block:: python
-
-            transpiler = SequentialTranspiler(
-                [
-                    ATranspiler(),
-                    BTranspiler(arg..),
-                    ..
-                ]
-            )
-            circuit = transpiler(circuit)
-    """
-
-    def __init__(self, transpilers: Sequence[CircuitTranspiler]):
-        self._transpilers = transpilers
-
-    def __call__(
-        self, circuit: NonParametricQuantumCircuit
-    ) -> NonParametricQuantumCircuit:
-        for transpiler in self._transpilers:
-            circuit = transpiler(circuit)
-        return circuit
-
-
-class GateDecomposer(CircuitTranspilerProtocol, ABC):
-    """Abstract class that represents CircuitTranspiler, such that target gates
-    are selected by decision function and each target gate is replaced by a
-    sequence of multiple gates."""
-
-    @abstractmethod
-    def is_target_gate(self, gate: QuantumGate) -> bool:
-        """Determine if a given gate is subject to decomposition.
-
-        Args:
-            gate: Gates in the circuit that are scanned from the front.
-        """
-        ...
-
-    @abstractmethod
-    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
-        """Describe the specific decomposition process. Only the target gates
-        satisfying is_target_gate() method are passed.
-
-        Args:
-            gate: The gates to be decomposed.
-        """
-        ...
-
-    def __call__(
-        self, circuit: NonParametricQuantumCircuit
-    ) -> NonParametricQuantumCircuit:
-        cg: list[QuantumGate] = []
-        for gate in circuit.gates:
-            if self.is_target_gate(gate):
-                cg.extend(self.decompose(gate))
-            else:
-                cg.append(gate)
-
-        cc = QuantumCircuit(circuit.qubit_count)
-        cc.extend(cg)
-        return cc
-
-
-class GateKindDecomposer(GateDecomposer, ABC):
-    """Abstract class that represents CircuitTranspiler, such that each gate is
-    identified by its gate name and the target gate is replaced by a sequence
-    of multiple gates.
-
-    Classes inheriting from this class can be used for
-    ParallelDecomposer.
-    """
-
-    @property
-    @abstractmethod
-    def target_gate_names(self) -> Sequence[str]:
-        """Returns the set of gate names to be decomposed."."""
-        ...
-
-    def is_target_gate(self, gate: QuantumGate) -> bool:
-        return gate.name in self.target_gate_names
-
-
-class ParallelDecomposer(CircuitTranspilerProtocol):
-    """CircuitTranspiler, which executes given GateKindDecomposer within a
-    single loop traversing the gate from the front.
-
-    Args:
-        decomposers: Sequence of GateKindDecomposer with no duplicate gate types
-            to act on.
-    """
-
-    def __init__(self, decomposers: Sequence[GateKindDecomposer]):
-        self._decomposer_map: Mapping[str, GateKindDecomposer] = {}
-        for dc in decomposers:
-            for name in dc.target_gate_names:
-                if name in self._decomposer_map:
-                    raise ValueError(
-                        "Multiple transpilers acting on the same type of gate"
-                        " were given."
-                    )
-                self._decomposer_map[name] = dc
-
-    def __call__(
-        self, circuit: NonParametricQuantumCircuit
-    ) -> NonParametricQuantumCircuit:
-        cg: list[QuantumGate] = []
-        for gate in circuit.gates:
-            if gate.name in self._decomposer_map:
-                cg.extend(self._decomposer_map[gate.name].decompose(gate))
-            else:
-                cg.append(gate)
-
-        cc = QuantumCircuit(circuit.qubit_count)
-        cc.extend(cg)
-        return cc
+from .transpiler import GateKindDecomposer
 
 
 class PauliDecomposeTranspiler(GateKindDecomposer):
@@ -573,119 +428,3 @@ def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
             gates.SqrtX(target),
             gates.RZ(target, phi + 3.0 * np.pi),
         ]
-
-
-class CliffordApproximationTranspiler(GateDecomposer):
-    r"""CircuitTranspiler, which replaces the non_clifford gate into sequence of
-    non-parametric Clifford gates.
-
-    If the input gate has angles, this transpiler replaces them with the
-    closest value in the set :math:`\{\pi n /2| n\in\mathbb{Z}\}`. Then
-    by using the rotation gate transpilers, it is decomposed into a
-    sequence of non-parametric Clifford gates.
-    """
-
-    def is_target_gate(self, gate: QuantumGate) -> bool:
-        return gate.name not in gate_names.CLIFFORD_GATE_NAMES
-
-    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
-        clif_set_x = {0: "Identity", 1: "SqrtX", 2: "X", 3: "SqrtXdag"}
-        clif_set_y = {0: "Identity", 1: "SqrtY", 2: "Y", 3: "SqrtYdag"}
-        clif_set_z = {0: "Identity", 1: "S", 2: "Z", 3: "Sdag"}
-        clif_set = {"RX": clif_set_x, "RY": clif_set_y, "RZ": clif_set_z}
-
-        target = gate.target_indices[0]
-        if gate.name == "T":
-            return [gates.S(target)]
-
-        elif gate.name == "Tdag":
-            return [gates.Sdag(target)]
-
-        elif gate.name in {"RX", "RY", "RZ", "U1", "U2", "U3", "PauliRotation"}:
-            if gate.name in {"RX", "RY", "RZ"}:
-                transpiled_gates: Sequence[QuantumGate] = [gate]
-            if gate.name == "U1":
-                transpiled_gates = U1ToRZTranspiler().decompose(gate)
-            if gate.name == "U2":
-                transpiled_gates = U2ToRZSqrtXTranspiler().decompose(gate)
-            if gate.name == "U3":
-                transpiled_gates = U3ToRZSqrtXTranspiler().decompose(gate)
-            if gate.name == "PauliRotation":
-                transpiled_gates = PauliRotationDecomposeTranspiler().decompose(gate)
-
-            appro_gates = []
-            for g in transpiled_gates:
-                if g.name in {"RX", "RY", "RZ"}:
-                    param = g.params[0]
-                    angle_int = np.round(2 * param / np.pi) % 4
-                    appro_gates.append(
-                        QuantumGate(clif_set[g.name][angle_int], (g.target_indices[0],))
-                    )
-                    continue
-                appro_gates.append(g)
-            return appro_gates
-
-        else:
-            raise NotImplementedError(
-                f"The input gate {gate.name} is not supported on the\
-                CliffordApproximationTranspiler."
-            )
-
-
-class IdentityInsertionTranspiler(CircuitTranspilerProtocol):
-    """If there are qubits to which any gate has not been applied, Identity
-    gates are added for those qubits.
-
-    The application of this transpiler ensures that every qubit has at
-    least one gate acting on it.
-    """
-
-    def __call__(
-        self, circuit: NonParametricQuantumCircuit
-    ) -> NonParametricQuantumCircuit:
-        non_applied = set(range(circuit.qubit_count))
-        for gate in circuit.gates:
-            for q in tuple(gate.control_indices) + tuple(gate.target_indices):
-                non_applied.discard(q)
-            if not non_applied:
-                return circuit
-
-        cc = QuantumCircuit(circuit.qubit_count)
-        cc.extend(circuit.gates)
-        for q in non_applied:
-            cc.add_gate(gates.Identity(q))
-        return cc
-
-
-#: CircuitTranspiler to transpile a QuntumCircuit into another
-#: QuantumCircuit containing only X, SqrtX, CNOT, and RZ.
-RZSetTranspiler: Callable[[], CircuitTranspiler] = lambda: SequentialTranspiler(
-    [
-        ParallelDecomposer(
-            [
-                CZ2CNOTHTranspiler(),
-                PauliDecomposeTranspiler(),
-                PauliRotationDecomposeTranspiler(),
-            ]
-        ),
-        ParallelDecomposer(
-            [
-                Y2RZXTranspiler(),
-                Z2RZTranspiler(),
-                H2RZSqrtXTranspiler(),
-                SqrtXdag2RZSqrtXTranspiler(),
-                SqrtY2RZSqrtXTranspiler(),
-                SqrtYdag2RZSqrtXTranspiler(),
-                S2RZTranspiler(),
-                Sdag2RZTranspiler(),
-                T2RZTranspiler(),
-                Tdag2RZTranspiler(),
-                RX2RZSqrtXTranspiler(),
-                RY2RZSqrtXTranspiler(),
-                U1ToRZTranspiler(),
-                U2ToRZSqrtXTranspiler(),
-                U3ToRZSqrtXTranspiler(),
-            ]
-        ),
-    ]
-)
diff --git a/packages/circuit/quri_parts/circuit/transpile/identity_insertion.py b/packages/circuit/quri_parts/circuit/transpile/identity_insertion.py
new file mode 100644
index 00000000..b147873a
--- /dev/null
+++ b/packages/circuit/quri_parts/circuit/transpile/identity_insertion.py
@@ -0,0 +1,38 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from quri_parts.circuit import NonParametricQuantumCircuit, QuantumCircuit, gates
+
+from .transpiler import CircuitTranspilerProtocol
+
+
+class IdentityInsertionTranspiler(CircuitTranspilerProtocol):
+    """If there are qubits to which any gate has not been applied, Identity
+    gates are added for those qubits.
+
+    The application of this transpiler ensures that every qubit has at
+    least one gate acting on it.
+    """
+
+    def __call__(
+        self, circuit: NonParametricQuantumCircuit
+    ) -> NonParametricQuantumCircuit:
+        non_applied = set(range(circuit.qubit_count))
+        for gate in circuit.gates:
+            for q in tuple(gate.control_indices) + tuple(gate.target_indices):
+                non_applied.discard(q)
+            if not non_applied:
+                return circuit
+
+        cc = QuantumCircuit(circuit.qubit_count)
+        cc.extend(circuit.gates)
+        for q in non_applied:
+            cc.add_gate(gates.Identity(q))
+        return cc
diff --git a/packages/circuit/quri_parts/circuit/transpile/transpiler.py b/packages/circuit/quri_parts/circuit/transpile/transpiler.py
new file mode 100644
index 00000000..80732274
--- /dev/null
+++ b/packages/circuit/quri_parts/circuit/transpile/transpiler.py
@@ -0,0 +1,158 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from abc import ABC, abstractmethod
+from collections.abc import Mapping, Sequence
+from typing import Callable, Protocol
+
+from typing_extensions import TypeAlias
+
+from quri_parts.circuit import NonParametricQuantumCircuit, QuantumCircuit, QuantumGate
+
+#: CircuitTranspiler Interface. A function or callable object that can map
+#: NonParametricQuantumCircuit to NonParametricQuantumCircuit.
+CircuitTranspiler: TypeAlias = Callable[
+    [NonParametricQuantumCircuit], NonParametricQuantumCircuit
+]
+
+
+class CircuitTranspilerProtocol(Protocol):
+    """Protocol of callable class that transpiles NonParametricQuantumCircuit
+    to NonParametricQuantumCircuit."""
+
+    @abstractmethod
+    def __call__(
+        self, circuit: NonParametricQuantumCircuit
+    ) -> NonParametricQuantumCircuit:
+        ...
+
+
+class SequentialTranspiler(CircuitTranspilerProtocol):
+    """CircuitTranspiler, which applies CircuitTranspilers in sequence.
+
+    Args:
+        transpilers: Sequence of CircuitTranspilers.
+
+    Examples:
+        .. highlight:: python
+        .. code-block:: python
+
+            transpiler = SequentialTranspiler(
+                [
+                    ATranspiler(),
+                    BTranspiler(arg..),
+                    ..
+                ]
+            )
+            circuit = transpiler(circuit)
+    """
+
+    def __init__(self, transpilers: Sequence[CircuitTranspiler]):
+        self._transpilers = transpilers
+
+    def __call__(
+        self, circuit: NonParametricQuantumCircuit
+    ) -> NonParametricQuantumCircuit:
+        for transpiler in self._transpilers:
+            circuit = transpiler(circuit)
+        return circuit
+
+
+class GateDecomposer(CircuitTranspilerProtocol, ABC):
+    """Abstract class that represents CircuitTranspiler, such that target gates
+    are selected by decision function and each target gate is replaced by a
+    sequence of multiple gates."""
+
+    @abstractmethod
+    def is_target_gate(self, gate: QuantumGate) -> bool:
+        """Determine if a given gate is subject to decomposition.
+
+        Args:
+            gate: Gates in the circuit that are scanned from the front.
+        """
+        ...
+
+    @abstractmethod
+    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
+        """Describe the specific decomposition process. Only the target gates
+        satisfying is_target_gate() method are passed.
+
+        Args:
+            gate: The gates to be decomposed.
+        """
+        ...
+
+    def __call__(
+        self, circuit: NonParametricQuantumCircuit
+    ) -> NonParametricQuantumCircuit:
+        cg: list[QuantumGate] = []
+        for gate in circuit.gates:
+            if self.is_target_gate(gate):
+                cg.extend(self.decompose(gate))
+            else:
+                cg.append(gate)
+
+        cc = QuantumCircuit(circuit.qubit_count)
+        cc.extend(cg)
+        return cc
+
+
+class GateKindDecomposer(GateDecomposer, ABC):
+    """Abstract class that represents CircuitTranspiler, such that each gate is
+    identified by its gate name and the target gate is replaced by a sequence
+    of multiple gates.
+
+    Classes inheriting from this class can be used for
+    ParallelDecomposer.
+    """
+
+    @property
+    @abstractmethod
+    def target_gate_names(self) -> Sequence[str]:
+        """Returns the set of gate names to be decomposed."."""
+        ...
+
+    def is_target_gate(self, gate: QuantumGate) -> bool:
+        return gate.name in self.target_gate_names
+
+
+class ParallelDecomposer(CircuitTranspilerProtocol):
+    """CircuitTranspiler, which executes given GateKindDecomposer within a
+    single loop traversing the gate from the front.
+
+    Args:
+        decomposers: Sequence of GateKindDecomposer with no duplicate gate types
+            to act on.
+    """
+
+    def __init__(self, decomposers: Sequence[GateKindDecomposer]):
+        self._decomposer_map: Mapping[str, GateKindDecomposer] = {}
+        for dc in decomposers:
+            for name in dc.target_gate_names:
+                if name in self._decomposer_map:
+                    raise ValueError(
+                        "Multiple transpilers acting on the same type of gate"
+                        " were given."
+                    )
+                self._decomposer_map[name] = dc
+
+    def __call__(
+        self, circuit: NonParametricQuantumCircuit
+    ) -> NonParametricQuantumCircuit:
+        cg: list[QuantumGate] = []
+        for gate in circuit.gates:
+            if gate.name in self._decomposer_map:
+                cg.extend(self._decomposer_map[gate.name].decompose(gate))
+            else:
+                cg.append(gate)
+
+        cc = QuantumCircuit(circuit.qubit_count)
+        cc.extend(cg)
+        return cc
diff --git a/packages/circuit/tests/circuit/test_transpile.py b/packages/circuit/tests/circuit/test_transpile.py
index 6c54a7a9..54741a58 100644
--- a/packages/circuit/tests/circuit/test_transpile.py
+++ b/packages/circuit/tests/circuit/test_transpile.py
@@ -20,46 +20,48 @@
     U1,
     U2,
     U3,
+    H,
+    Identity,
+    Pauli,
+    PauliRotation,
+    QuantumCircuit,
+    S,
+    Sdag,
+    SqrtX,
+    SqrtXdag,
+    SqrtY,
+    SqrtYdag,
+    T,
+    Tdag,
+    X,
+    Y,
+    Z,
+)
+from quri_parts.circuit.transpile import (
     CliffordApproximationTranspiler,
     CZ2CNOTHTranspiler,
-    H,
     H2RZSqrtXTranspiler,
-    Identity,
     IdentityInsertionTranspiler,
-    Pauli,
     PauliDecomposeTranspiler,
-    PauliRotation,
     PauliRotationDecomposeTranspiler,
-    QuantumCircuit,
     RX2RZSqrtXTranspiler,
     RY2RZSqrtXTranspiler,
     RZSetTranspiler,
-    S,
     S2RZTranspiler,
-    Sdag,
     Sdag2RZTranspiler,
-    SqrtX,
     SqrtX2RZHTranspiler,
-    SqrtXdag,
     SqrtXdag2RZSqrtXTranspiler,
-    SqrtY,
     SqrtY2RZSqrtXTranspiler,
-    SqrtYdag,
     SqrtYdag2RZSqrtXTranspiler,
     SWAP2CNOTTranspiler,
-    T,
     T2RZTranspiler,
-    Tdag,
     Tdag2RZTranspiler,
     U1ToRZTranspiler,
     U2ToRZSqrtXTranspiler,
     U3ToRZSqrtXTranspiler,
-    X,
     X2HZTranspiler,
     X2SqrtXTranspiler,
-    Y,
     Y2RZXTranspiler,
-    Z,
     Z2HXTranspiler,
     Z2RZTranspiler,
 )
diff --git a/packages/cirq/tests/cirq/circuit/test_cirq_transpiler.py b/packages/cirq/tests/cirq/circuit/test_cirq_transpiler.py
index a2d9d70d..e00fef8e 100644
--- a/packages/cirq/tests/cirq/circuit/test_cirq_transpiler.py
+++ b/packages/cirq/tests/cirq/circuit/test_cirq_transpiler.py
@@ -8,7 +8,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-from quri_parts.circuit import (
+from quri_parts.circuit.transpile import (
     PauliDecomposeTranspiler,
     PauliRotationDecomposeTranspiler,
     SequentialTranspiler,
diff --git a/packages/qiskit/tests/qiskit/circuit/test_qiskit_transpile.py b/packages/qiskit/tests/qiskit/circuit/test_qiskit_transpile.py
index 397952e9..42b0d105 100644
--- a/packages/qiskit/tests/qiskit/circuit/test_qiskit_transpile.py
+++ b/packages/qiskit/tests/qiskit/circuit/test_qiskit_transpile.py
@@ -8,7 +8,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-from quri_parts.circuit import (
+from quri_parts.circuit.transpile import (
     PauliDecomposeTranspiler,
     PauliRotationDecomposeTranspiler,
     SequentialTranspiler,
diff --git a/packages/stim/quri_parts/stim/circuit/__init__.py b/packages/stim/quri_parts/stim/circuit/__init__.py
index d2f16350..f261926c 100644
--- a/packages/stim/quri_parts/stim/circuit/__init__.py
+++ b/packages/stim/quri_parts/stim/circuit/__init__.py
@@ -14,9 +14,7 @@
 from typing_extensions import TypeAlias, TypeGuard
 
 from quri_parts.circuit import (
-    CliffordApproximationTranspiler,
     NonParametricQuantumCircuit,
-    PauliDecomposeTranspiler,
     QuantumGate,
     gate_names,
     is_clifford,
@@ -38,6 +36,10 @@
     Y,
     Z,
 )
+from quri_parts.circuit.transpile import (
+    CliffordApproximationTranspiler,
+    PauliDecomposeTranspiler,
+)
 
 _StimGateNameType: TypeAlias = Literal[
     "Identity",
diff --git a/private/algo/quri_parts/private/algo/eigensolver/cafqa.py b/private/algo/quri_parts/private/algo/eigensolver/cafqa.py
index f1fba655..f50615c6 100644
--- a/private/algo/quri_parts/private/algo/eigensolver/cafqa.py
+++ b/private/algo/quri_parts/private/algo/eigensolver/cafqa.py
@@ -6,10 +6,10 @@
 from skopt import forest_minimize
 
 from quri_parts.circuit import (
-    CliffordApproximationTranspiler,
     NonParametricQuantumCircuit,
     UnboundParametricQuantumCircuitProtocol,
 )
+from quri_parts.circuit.transpile import CliffordApproximationTranspiler
 from quri_parts.core.estimator import QuantumEstimator
 from quri_parts.core.operator import Operator
 from quri_parts.core.state import GeneralCircuitQuantumState

From b3665d45c56c87ca8adbb9bb0f90edcd314663cd Mon Sep 17 00:00:00 2001
From: Kentaro Wada <wada.k@qunasys.com>
Date: Tue, 29 Nov 2022 16:42:20 +0900
Subject: [PATCH 2/3] cleanup circuit module init

---
 .../circuit/quri_parts/circuit/__init__.py    | 61 -------------------
 1 file changed, 61 deletions(-)

diff --git a/packages/circuit/quri_parts/circuit/__init__.py b/packages/circuit/quri_parts/circuit/__init__.py
index b63d219b..a1a6cb8d 100644
--- a/packages/circuit/quri_parts/circuit/__init__.py
+++ b/packages/circuit/quri_parts/circuit/__init__.py
@@ -71,38 +71,6 @@
     ParameterOrLinearFunction,
 )
 
-# from .transpile import (
-#     CircuitTranspiler,
-#     CliffordApproximationTranspiler,
-#     CNOT2CZHTranspiler,
-#     CZ2CNOTHTranspiler,
-#     H2RZSqrtXTranspiler,
-#     IdentityInsertionTranspiler,
-#     PauliDecomposeTranspiler,
-#     PauliRotationDecomposeTranspiler,
-#     RX2RZSqrtXTranspiler,
-#     RY2RZSqrtXTranspiler,
-#     RZSetTranspiler,
-#     S2RZTranspiler,
-#     Sdag2RZTranspiler,
-#     SequentialTranspiler,
-#     SqrtX2RZHTranspiler,
-#     SqrtXdag2RZSqrtXTranspiler,
-#     SqrtY2RZSqrtXTranspiler,
-#     SqrtYdag2RZSqrtXTranspiler,
-#     SWAP2CNOTTranspiler,
-#     T2RZTranspiler,
-#     Tdag2RZTranspiler,
-#     U1ToRZTranspiler,
-#     U2ToRZSqrtXTranspiler,
-#     U3ToRZSqrtXTranspiler,
-#     X2HZTranspiler,
-#     X2SqrtXTranspiler,
-#     Y2RZXTranspiler,
-#     Z2HXTranspiler,
-#     Z2RZTranspiler,
-# )
-
 #: A placeholder representing a constant term.
 CONST = CONST
 
@@ -164,35 +132,6 @@
     "LinearMappedUnboundParametricQuantumCircuitBase",
     "LinearMappedUnboundParametricQuantumCircuit",
     "ImmutableLinearMappedUnboundParametricQuantumCircuit",
-    # "CircuitTranspiler",
-    # "SequentialTranspiler",
-    # "PauliDecomposeTranspiler",
-    # "PauliRotationDecomposeTranspiler",
-    # "CliffordApproximationTranspiler",
-    # "CNOT2CZHTranspiler",
-    # "CZ2CNOTHTranspiler",
-    # "SWAP2CNOTTranspiler",
-    # "Z2HXTranspiler",
-    # "X2HZTranspiler",
-    # "X2SqrtXTranspiler",
-    # "SqrtX2RZHTranspiler",
-    # "H2RZSqrtXTranspiler",
-    # "Y2RZXTranspiler",
-    # "Z2RZTranspiler",
-    # "SqrtXdag2RZSqrtXTranspiler",
-    # "SqrtY2RZSqrtXTranspiler",
-    # "SqrtYdag2RZSqrtXTranspiler",
-    # "S2RZTranspiler",
-    # "Sdag2RZTranspiler",
-    # "T2RZTranspiler",
-    # "Tdag2RZTranspiler",
-    # "RX2RZSqrtXTranspiler",
-    # "RY2RZSqrtXTranspiler",
-    # "U1ToRZTranspiler",
-    # "U2ToRZSqrtXTranspiler",
-    # "U3ToRZSqrtXTranspiler",
-    # "IdentityInsertionTranspiler",
-    # "RZSetTranspiler",
     "inverse_gate",
     "is_clifford",
 ]

From 4a65f58ee950a3d6a76c98f0932557ebf10d89d5 Mon Sep 17 00:00:00 2001
From: Kentaro Wada <wada.k@qunasys.com>
Date: Wed, 30 Nov 2022 08:36:54 +0900
Subject: [PATCH 3/3] rearrange tests for transpile module, etc.

---
 .../quri_parts/circuit/transpile/__init__.py  |   8 +-
 ...rd_approx.py => clifford_approximation.py} |   2 +-
 .../circuit/transpile/gate_kind_decomposer.py |  64 ----------
 .../transpile/multi_pauli_decomposer.py       |  81 +++++++++++++
 .../transpile/test_clifford_approximation.py  |  78 ++++++++++++
 .../test_gate_kind_decomposer.py}             | 114 ------------------
 .../transpile/test_identity_insertion.py      |  43 +++++++
 .../transpile/test_multi_pauli_decomposer.py  |  61 ++++++++++
 8 files changed, 269 insertions(+), 182 deletions(-)
 rename packages/circuit/quri_parts/circuit/transpile/{clifford_approx.py => clifford_approximation.py} (97%)
 create mode 100644 packages/circuit/quri_parts/circuit/transpile/multi_pauli_decomposer.py
 create mode 100644 packages/circuit/tests/circuit/transpile/test_clifford_approximation.py
 rename packages/circuit/tests/circuit/{test_transpile.py => transpile/test_gate_kind_decomposer.py} (78%)
 create mode 100644 packages/circuit/tests/circuit/transpile/test_identity_insertion.py
 create mode 100644 packages/circuit/tests/circuit/transpile/test_multi_pauli_decomposer.py

diff --git a/packages/circuit/quri_parts/circuit/transpile/__init__.py b/packages/circuit/quri_parts/circuit/transpile/__init__.py
index 1b4eeda4..8a84d0fb 100644
--- a/packages/circuit/quri_parts/circuit/transpile/__init__.py
+++ b/packages/circuit/quri_parts/circuit/transpile/__init__.py
@@ -10,12 +10,10 @@
 
 from typing import Callable
 
-from .clifford_approx import CliffordApproximationTranspiler
+from .clifford_approximation import CliffordApproximationTranspiler
 from .gate_kind_decomposer import (
     CZ2CNOTHTranspiler,
     H2RZSqrtXTranspiler,
-    PauliDecomposeTranspiler,
-    PauliRotationDecomposeTranspiler,
     RX2RZSqrtXTranspiler,
     RY2RZSqrtXTranspiler,
     S2RZTranspiler,
@@ -37,6 +35,10 @@
     Z2RZTranspiler,
 )
 from .identity_insertion import IdentityInsertionTranspiler
+from .multi_pauli_decomposer import (
+    PauliDecomposeTranspiler,
+    PauliRotationDecomposeTranspiler,
+)
 from .transpiler import (
     CircuitTranspiler,
     CircuitTranspilerProtocol,
diff --git a/packages/circuit/quri_parts/circuit/transpile/clifford_approx.py b/packages/circuit/quri_parts/circuit/transpile/clifford_approximation.py
similarity index 97%
rename from packages/circuit/quri_parts/circuit/transpile/clifford_approx.py
rename to packages/circuit/quri_parts/circuit/transpile/clifford_approximation.py
index 751e4cd4..e2911d27 100644
--- a/packages/circuit/quri_parts/circuit/transpile/clifford_approx.py
+++ b/packages/circuit/quri_parts/circuit/transpile/clifford_approximation.py
@@ -15,11 +15,11 @@
 from quri_parts.circuit import QuantumGate, gate_names, gates
 
 from .gate_kind_decomposer import (
-    PauliRotationDecomposeTranspiler,
     U1ToRZTranspiler,
     U2ToRZSqrtXTranspiler,
     U3ToRZSqrtXTranspiler,
 )
+from .multi_pauli_decomposer import PauliRotationDecomposeTranspiler
 from .transpiler import GateDecomposer
 
 
diff --git a/packages/circuit/quri_parts/circuit/transpile/gate_kind_decomposer.py b/packages/circuit/quri_parts/circuit/transpile/gate_kind_decomposer.py
index 360f729e..e9f88fb5 100644
--- a/packages/circuit/quri_parts/circuit/transpile/gate_kind_decomposer.py
+++ b/packages/circuit/quri_parts/circuit/transpile/gate_kind_decomposer.py
@@ -17,70 +17,6 @@
 from .transpiler import GateKindDecomposer
 
 
-class PauliDecomposeTranspiler(GateKindDecomposer):
-    """CircuitTranspiler, which decompose multi-qubit Pauli gates into X, Y,
-    and Z gates."""
-
-    @property
-    def target_gate_names(self) -> Sequence[str]:
-        return [gate_names.Pauli]
-
-    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
-        indices = gate.target_indices
-        pauli_ids = gate.pauli_ids
-        ret: list[QuantumGate] = []
-
-        for index, pauli in zip(indices, pauli_ids):
-            if pauli == 1:
-                ret.append(gates.X(index))
-            elif pauli == 2:
-                ret.append(gates.Y(index))
-            elif pauli == 3:
-                ret.append(gates.Z(index))
-            else:
-                raise ValueError("Pauli id must be either 1, 2, or 3.")
-
-        return ret
-
-
-class PauliRotationDecomposeTranspiler(GateKindDecomposer):
-    """CircuitTranspiler, which decompose multi-qubit PauliRotation gates into
-    H, RX, RZ, and CNOT gates."""
-
-    @property
-    def target_gate_names(self) -> Sequence[str]:
-        return [gate_names.PauliRotation]
-
-    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
-        indices = gate.target_indices
-        pauli_ids = gate.pauli_ids
-        angle = gate.params[0]
-        ret: list[QuantumGate] = []
-
-        def rot_gates(rot_sign: int = 1) -> Sequence[QuantumGate]:
-            rc = []
-            for index, pauli in zip(indices, pauli_ids):
-                if pauli == 1:
-                    rc.append(gates.H(index))
-                elif pauli == 2:
-                    rc.append(gates.RX(index, rot_sign * np.pi / 2.0))
-                elif pauli == 3:
-                    pass
-                else:
-                    raise ValueError("Pauli id must be either 1, 2, or 3.")
-            return rc
-
-        ret.extend(rot_gates(1))
-        for i in range(1, len(indices)):
-            ret.append(gates.CNOT(indices[i], indices[0]))
-        ret.append(gates.RZ(indices[0], angle))
-        for i in range(1, len(indices)):
-            ret.append(gates.CNOT(indices[i], indices[0]))
-        ret.extend(rot_gates(-1))
-
-        return ret
-
-
 class CNOT2CZHTranspiler(GateKindDecomposer):
     """CircuitTranspiler, which decompose CNOT gates into sequence of H and CZ
     gates."""
diff --git a/packages/circuit/quri_parts/circuit/transpile/multi_pauli_decomposer.py b/packages/circuit/quri_parts/circuit/transpile/multi_pauli_decomposer.py
new file mode 100644
index 00000000..7be9a1da
--- /dev/null
+++ b/packages/circuit/quri_parts/circuit/transpile/multi_pauli_decomposer.py
@@ -0,0 +1,81 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from collections.abc import Sequence
+
+import numpy as np
+
+from quri_parts.circuit import QuantumGate, gate_names, gates
+
+from .transpiler import GateKindDecomposer
+
+
+class PauliDecomposeTranspiler(GateKindDecomposer):
+    """CircuitTranspiler, which decompose multi-qubit Pauli gates into X, Y,
+    and Z gates."""
+
+    @property
+    def target_gate_names(self) -> Sequence[str]:
+        return [gate_names.Pauli]
+
+    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
+        indices = gate.target_indices
+        pauli_ids = gate.pauli_ids
+        ret: list[QuantumGate] = []
+
+        for index, pauli in zip(indices, pauli_ids):
+            if pauli == 1:
+                ret.append(gates.X(index))
+            elif pauli == 2:
+                ret.append(gates.Y(index))
+            elif pauli == 3:
+                ret.append(gates.Z(index))
+            else:
+                raise ValueError("Pauli id must be either 1, 2, or 3.")
+
+        return ret
+
+
+class PauliRotationDecomposeTranspiler(GateKindDecomposer):
+    """CircuitTranspiler, which decompose multi-qubit PauliRotation gates into
+    H, RX, RZ, and CNOT gates."""
+
+    @property
+    def target_gate_names(self) -> Sequence[str]:
+        return [gate_names.PauliRotation]
+
+    def decompose(self, gate: QuantumGate) -> Sequence[QuantumGate]:
+        indices = gate.target_indices
+        pauli_ids = gate.pauli_ids
+        angle = gate.params[0]
+        ret: list[QuantumGate] = []
+
+        def rot_gates(rot_sign: int = 1) -> Sequence[QuantumGate]:
+            rc = []
+            for index, pauli in zip(indices, pauli_ids):
+                if pauli == 1:
+                    rc.append(gates.H(index))
+                elif pauli == 2:
+                    rc.append(gates.RX(index, rot_sign * np.pi / 2.0))
+                elif pauli == 3:
+                    pass
+                else:
+                    raise ValueError("Pauli id must be either 1, 2, or 3.")
+            return rc
+
+        ret.extend(rot_gates(1))
+        for i in range(1, len(indices)):
+            ret.append(gates.CNOT(indices[i], indices[0]))
+        ret.append(gates.RZ(indices[0], angle))
+        for i in range(1, len(indices)):
+            ret.append(gates.CNOT(indices[i], indices[0]))
+        ret.extend(rot_gates(-1))
+
+        return ret
diff --git a/packages/circuit/tests/circuit/transpile/test_clifford_approximation.py b/packages/circuit/tests/circuit/transpile/test_clifford_approximation.py
new file mode 100644
index 00000000..5d164f31
--- /dev/null
+++ b/packages/circuit/tests/circuit/transpile/test_clifford_approximation.py
@@ -0,0 +1,78 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import numpy as np
+
+from quri_parts.circuit import (
+    CNOT,
+    CZ,
+    RX,
+    RY,
+    U2,
+    U3,
+    H,
+    PauliRotation,
+    QuantumCircuit,
+    S,
+    Sdag,
+    SqrtX,
+    SqrtXdag,
+    SqrtY,
+    T,
+    Z,
+)
+from quri_parts.circuit.transpile import CliffordApproximationTranspiler
+
+
+class TestCliffordApproximationTranspile:
+    def test_cliffordapproximation_transpiler(self) -> None:
+
+        gate_list = [
+            H(0),
+            T(1),
+            RY(0, 1 * np.pi / 2),
+            RX(1, 1.4 * np.pi / 2),
+            U2(1, 0.5 * np.pi / 2, 1.7 * np.pi / 2),
+            U3(3, 0.5 * np.pi / 2, 1.5 * np.pi / 2, 2.5 * np.pi / 2),
+            CZ(2, 3),
+            PauliRotation((0, 1, 2), (3, 2, 1), 0.51 * np.pi / 2),
+        ]
+        circuit = QuantumCircuit(4, gate_list)
+        transpiled = CliffordApproximationTranspiler()(circuit)
+
+        expect = QuantumCircuit(4)
+        expect.extend(
+            [
+                H(0),  # H(0)
+                S(1),  # T(1)
+                SqrtY(0),  # RY
+                SqrtX(1),  # RX
+                S(1),  # U2
+                SqrtX(1),
+                Z(1),
+                Z(3),  # U3
+                SqrtX(3),
+                Z(3),
+                SqrtX(3),
+                Sdag(3),
+                CZ(2, 3),  # CZ
+                SqrtX(1),  # PauliRotation
+                H(2),
+                CNOT(1, 0),
+                CNOT(2, 0),
+                S(0),
+                CNOT(1, 0),
+                CNOT(2, 0),
+                SqrtXdag(1),
+                H(2),
+            ]
+        )
+
+        assert transpiled.gates == expect.gates
diff --git a/packages/circuit/tests/circuit/test_transpile.py b/packages/circuit/tests/circuit/transpile/test_gate_kind_decomposer.py
similarity index 78%
rename from packages/circuit/tests/circuit/test_transpile.py
rename to packages/circuit/tests/circuit/transpile/test_gate_kind_decomposer.py
index 54741a58..f9edcbe0 100644
--- a/packages/circuit/tests/circuit/test_transpile.py
+++ b/packages/circuit/tests/circuit/transpile/test_gate_kind_decomposer.py
@@ -21,7 +21,6 @@
     U2,
     U3,
     H,
-    Identity,
     Pauli,
     PauliRotation,
     QuantumCircuit,
@@ -38,12 +37,8 @@
     Z,
 )
 from quri_parts.circuit.transpile import (
-    CliffordApproximationTranspiler,
     CZ2CNOTHTranspiler,
     H2RZSqrtXTranspiler,
-    IdentityInsertionTranspiler,
-    PauliDecomposeTranspiler,
-    PauliRotationDecomposeTranspiler,
     RX2RZSqrtXTranspiler,
     RY2RZSqrtXTranspiler,
     RZSetTranspiler,
@@ -67,70 +62,6 @@
 )
 
 
-class TestIdentityInsertion:
-    def test_fill_void(self) -> None:
-        circuit = QuantumCircuit(3)
-        circuit.extend([H(0), CNOT(0, 2), X(2)])
-        transpiled = IdentityInsertionTranspiler()(circuit)
-
-        expect = QuantumCircuit(3)
-        expect.extend([H(0), CNOT(0, 2), X(2), Identity(1)])
-
-        assert transpiled.gates == expect.gates
-
-    def test_fill_empty(self) -> None:
-        circuit = QuantumCircuit(2)
-        transpiled = IdentityInsertionTranspiler()(circuit)
-
-        expect = QuantumCircuit(2)
-        expect.extend([Identity(0), Identity(1)])
-
-        assert transpiled.gates == expect.gates
-
-    def test_no_change(self) -> None:
-        circuit = QuantumCircuit(2)
-        circuit.extend([H(0), SWAP(1, 0)])
-        transpiled = IdentityInsertionTranspiler()(circuit)
-
-        expect = QuantumCircuit(2)
-        expect.extend([H(0), SWAP(1, 0)])
-
-        assert transpiled.gates == expect.gates
-
-
-class TestMultiPauliDecompose:
-    def test_pauli_decompose(self) -> None:
-        circuit = QuantumCircuit(3)
-        circuit.add_gate(Pauli((1, 0, 2), (3, 1, 2)))
-        transpiled = PauliDecomposeTranspiler()(circuit)
-
-        expect = QuantumCircuit(3)
-        expect.extend([Z(1), X(0), Y(2)])
-
-        assert transpiled.gates == expect.gates
-
-    def test_pauli_rotation_decompose(self) -> None:
-        circuit = QuantumCircuit(3)
-        circuit.add_gate(PauliRotation((0, 2, 1), (2, 3, 1), np.pi / 4.0))
-        transpiled = PauliRotationDecomposeTranspiler()(circuit)
-
-        expect = QuantumCircuit(3)
-        gates = [
-            RX(0, np.pi / 2.0),
-            H(1),
-            CNOT(2, 0),
-            CNOT(1, 0),
-            RZ(0, np.pi / 4.0),
-            CNOT(2, 0),
-            CNOT(1, 0),
-            RX(0, -np.pi / 2.0),
-            H(1),
-        ]
-        expect.extend(gates)
-
-        assert transpiled.gates == expect.gates
-
-
 class TestFTQCSetTranspile:
     def test_cz_decompose(self) -> None:
         circuit = QuantumCircuit(2)
@@ -379,51 +310,6 @@ def test_u3torzsqrtx_transpiler(self) -> None:
 
         assert transpiled.gates == expect.gates
 
-    def test_cliffordapproximation_transpiler(self) -> None:
-
-        gate_list = [
-            H(0),
-            T(1),
-            RY(0, 1 * np.pi / 2),
-            RX(1, 1.4 * np.pi / 2),
-            U2(1, 0.5 * np.pi / 2, 1.7 * np.pi / 2),
-            U3(3, 0.5 * np.pi / 2, 1.5 * np.pi / 2, 2.5 * np.pi / 2),
-            CZ(2, 3),
-            PauliRotation((0, 1, 2), (3, 2, 1), 0.51 * np.pi / 2),
-        ]
-        circuit = QuantumCircuit(4, gate_list)
-        transpiled = CliffordApproximationTranspiler()(circuit)
-
-        expect = QuantumCircuit(4)
-        expect.extend(
-            [
-                H(0),  # H(0)
-                S(1),  # T(1)
-                SqrtY(0),  # RY
-                SqrtX(1),  # RX
-                S(1),  # U2
-                SqrtX(1),
-                Z(1),
-                Z(3),  # U3
-                SqrtX(3),
-                Z(3),
-                SqrtX(3),
-                Sdag(3),
-                CZ(2, 3),  # CZ
-                SqrtX(1),  # PauliRotation
-                H(2),
-                CNOT(1, 0),
-                CNOT(2, 0),
-                S(0),
-                CNOT(1, 0),
-                CNOT(2, 0),
-                SqrtXdag(1),
-                H(2),
-            ]
-        )
-
-        assert transpiled.gates == expect.gates
-
     def test_rzset_transpiler(self) -> None:
         theta = np.random.rand() * 2.0 * np.pi
         phi = np.random.rand() * 2.0 * np.pi
diff --git a/packages/circuit/tests/circuit/transpile/test_identity_insertion.py b/packages/circuit/tests/circuit/transpile/test_identity_insertion.py
new file mode 100644
index 00000000..6d5b7ef8
--- /dev/null
+++ b/packages/circuit/tests/circuit/transpile/test_identity_insertion.py
@@ -0,0 +1,43 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from quri_parts.circuit import CNOT, SWAP, H, Identity, QuantumCircuit, X
+from quri_parts.circuit.transpile import IdentityInsertionTranspiler
+
+
+class TestIdentityInsertion:
+    def test_fill_void(self) -> None:
+        circuit = QuantumCircuit(3)
+        circuit.extend([H(0), CNOT(0, 2), X(2)])
+        transpiled = IdentityInsertionTranspiler()(circuit)
+
+        expect = QuantumCircuit(3)
+        expect.extend([H(0), CNOT(0, 2), X(2), Identity(1)])
+
+        assert transpiled.gates == expect.gates
+
+    def test_fill_empty(self) -> None:
+        circuit = QuantumCircuit(2)
+        transpiled = IdentityInsertionTranspiler()(circuit)
+
+        expect = QuantumCircuit(2)
+        expect.extend([Identity(0), Identity(1)])
+
+        assert transpiled.gates == expect.gates
+
+    def test_no_change(self) -> None:
+        circuit = QuantumCircuit(2)
+        circuit.extend([H(0), SWAP(1, 0)])
+        transpiled = IdentityInsertionTranspiler()(circuit)
+
+        expect = QuantumCircuit(2)
+        expect.extend([H(0), SWAP(1, 0)])
+
+        assert transpiled.gates == expect.gates
diff --git a/packages/circuit/tests/circuit/transpile/test_multi_pauli_decomposer.py b/packages/circuit/tests/circuit/transpile/test_multi_pauli_decomposer.py
new file mode 100644
index 00000000..c209b2f7
--- /dev/null
+++ b/packages/circuit/tests/circuit/transpile/test_multi_pauli_decomposer.py
@@ -0,0 +1,61 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#      http://www.apache.org/licenses/LICENSE-2.0
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import numpy as np
+
+from quri_parts.circuit import (
+    CNOT,
+    RX,
+    RZ,
+    H,
+    Pauli,
+    PauliRotation,
+    QuantumCircuit,
+    X,
+    Y,
+    Z,
+)
+from quri_parts.circuit.transpile import (
+    PauliDecomposeTranspiler,
+    PauliRotationDecomposeTranspiler,
+)
+
+
+class TestMultiPauliDecompose:
+    def test_pauli_decompose(self) -> None:
+        circuit = QuantumCircuit(3)
+        circuit.add_gate(Pauli((1, 0, 2), (3, 1, 2)))
+        transpiled = PauliDecomposeTranspiler()(circuit)
+
+        expect = QuantumCircuit(3)
+        expect.extend([Z(1), X(0), Y(2)])
+
+        assert transpiled.gates == expect.gates
+
+    def test_pauli_rotation_decompose(self) -> None:
+        circuit = QuantumCircuit(3)
+        circuit.add_gate(PauliRotation((0, 2, 1), (2, 3, 1), np.pi / 4.0))
+        transpiled = PauliRotationDecomposeTranspiler()(circuit)
+
+        expect = QuantumCircuit(3)
+        gates = [
+            RX(0, np.pi / 2.0),
+            H(1),
+            CNOT(2, 0),
+            CNOT(1, 0),
+            RZ(0, np.pi / 4.0),
+            CNOT(2, 0),
+            CNOT(1, 0),
+            RX(0, -np.pi / 2.0),
+            H(1),
+        ]
+        expect.extend(gates)
+
+        assert transpiled.gates == expect.gates
